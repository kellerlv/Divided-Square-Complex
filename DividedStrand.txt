-- u and v are complementary sublists of 0..n-1
-- this function counts the number of inversion to unshuffle u|v
numberOfInversions = (u,v) -> (
    c := 0;
    for j in v do (
	for i in u do (
	    if j-i<0 then c=c+1;
	    );
	);
    return c;
    )

--this code computes the comultiplication map
--wedge^(p+q) F -> wedge^p F ** wedge^q F 
--with respect to the standard basis orders
extComult = (p,q,F) -> (L:={};
      n:=rank F;
      b1:=binomial(n,p)-1;
      b2:=binomial(n,q)-1;
      b3:=binomial(n,p+q)-1;
      L1:=subsets(toList(0..n-1),p);
      L2:=subsets(toList(0..n-1),q);
	--labels for basis of p+q exterior power:
      L3:=subsets(toList(0..n-1),p+q);
	--labels for the basis of the tensor product of 
	--p and q exterior powers:
      for i from 0 to b1 do (
		for j from 0 to b2 do (
		L=L|{(L1_i,L2_j)}; );
	);
      Mmut := mutableMatrix(ring(F),#L,#L3);
      for k from 0 to b3 do (
      for l from 0 to (#L)-1 do (
      	if (set(flatten(L_l))===set((L3)_k)) then (
		Mmut_(l,k) = (-1)^(numberOfInversions((L_l)_0,(L_l)_1)); 
	);
	);
	);
return map(exteriorPower(p,F)**exteriorPower(q,F),exteriorPower(p+q,F),promote(matrix Mmut, ring(F)));
)



--this function computes the contraction map
--sending wedge^r (F*) ** wedge^n (F) -> wedge^(n-r) F
extContract = (r,n,F) -> (D:=extComult(r,n-r,F);
M:=map((ring(F))^1,exteriorPower(r,dual F)**exteriorPower(r,F),matrix{flatten entries id_(exteriorPower(r,F))});
a:=id_(exteriorPower(r,dual(F)))**D;
b:=M**id_(exteriorPower(n-r,F));
C:=b*a;
return C;
)



--this function computes the comultiplication
--map on the divided power algebra 
--D_(p+q) F -> D_p F ** D_q F with respect
--to the GrRevLex basis order
divComult = (p,q,F) -> (n:=rank(F);
L:=compositions(n,p+q);
L1:=compositions(n,p);
L2:=compositions(n,q);
L3:={};
for i from 0 to (#L1)-1 do (
	for j from 0 to (#L2)-1 do (
		L3=L3|{(L1_i,L2_j)};
	);
);
Mmut:=mutableMatrix(ring(F),#L3,#L);
for i from 0 to (#L)-1 do (
	for j from 0 to (#L3)-1 do (
		for k in L1 do (
			if (k,L_i-k)==L3_j then Mmut_(j,i)=1;
		);
	);
);
return map(symmetricPower(p,F)**symmetricPower(q,F),symmetricPower(p+q,F),matrix Mmut);
)


--this computes the natural map
--D_p F ** D_q F -> D_(p+q) F with
--respect to GrRevLex basis order
divProduct = (p,q,F) -> (n:=rank(F);
L:=compositions(n,p+q);
L1:=compositions(n,p);
L2:=compositions(n,q);
L3:={};
for i from 0 to (#L1)-1 do (
	for j from 0 to (#L2)-1 do (
		L3=L3|{(L1_i,L2_j)};
	);
);
Mmut:=mutableMatrix(ring(F),#L,#L3);
for i from 0 to (#L)-1 do (
	for j from 0 to (#L3)-1 do (
		for k in L1 do (
			if (k,L_i-k)==L3_j then Mmut_(i,j)=product(k,L_i-k,(l,m)->binomial(l+m,m));
		);
	);
);
return map(symmetricPower(p+q,F),symmetricPower(p,F)**symmetricPower(q,F),matrix Mmut);
)


--this computes the comultiplication
--map S_(p+q) F -> S_p F ** S_q F with
--respect to GrRevLex order.
symComult = (p,q,F) -> (n:=rank(F);
L:=compositions(n,p+q);
L1:=compositions(n,p);
L2:=compositions(n,q);
L3:={};
for i from 0 to (#L1)-1 do (
	for j from 0 to (#L2)-1 do (
		L3=L3|{(L1_i,L2_j)};
	);
);
Mmut:=mutableMatrix(ring(F),#L3,#L);
for i from 0 to (#L)-1 do (
	for j from 0 to (#L3)-1 do (
		for k in L1 do (
			if (k,L_i-k)==L3_j then Mmut_(j,i)=product(k,L_i-k,(l,m)->binomial(l+m,m));
		);
	);
);
return map(symmetricPower(p,F)**symmetricPower(q,F),symmetricPower(p+q,F),matrix Mmut);
)

--this computes the natural map
--S_p F ** S_q F -> S_(p+q) F with
--respect to GrRevLex basis order
symProduct = (p,q,F) -> (n:=rank(F);
L:=compositions(n,p+q);
L1:=compositions(n,p);
L2:=compositions(n,q);
L3:={};
for i from 0 to (#L1)-1 do (
	for j from 0 to (#L2)-1 do (
		L3=L3|{(L1_i,L2_j)};
	);
);
Mmut:=mutableMatrix(ring(F),#L,#L3);
for i from 0 to (#L)-1 do (
	for j from 0 to (#L3)-1 do (
		for k in L1 do (
			if (k,L_i-k)==L3_j then Mmut_(i,j)=1;
		);
	);
);
return map(symmetricPower(p+q,F),symmetricPower(p,F)**symmetricPower(q,F),matrix Mmut);
)

--used in the rankList command
sub1 = L -> (if (L_0==L_1) and not(L_0==0) then return {L-{1,0}};
if not(L_0==L_1) and (L-{1,0}>={0,0}) and (L-{0,1}>={0,0}) then
return {L-{1,0},L-{0,1}};
if (L-{1,0}>={0,0}) and not(L-{0,1}>={0,0}) then
return {L-{1,0}};
if not(L-{1,0}>={0,0}) and (L-{0,1}>={0,0}) then
return {L-{0,1}};)

--this outputs the products appearing in the degree i
--spot of the strand of the divided square
rankList = (p,q) -> (L:={{{p,q}},sub1({p,q})};
for i from 2 to p+q-1 do (L=L|{unique flatten (L_(i-1)/sub1)}; );
return L;)

--this computes the tate
--differential F_p**F_q -> F_(p-1)**F_q + F_p **F_(q-1)
nat = (p,q,F) -> (if not(p==q) and (p>0) then (
		if not(p==q-1) then return ((F.dd_p)**id_(F_q))||((-1)^p*(id_(F_p))**F.dd_q);
		if (p==q-1) and even(p) then return ((F.dd_p)**id_(F_q))||(divProduct(1,1,F_p)*((id_(F_p))**F.dd_q));
		if (p==q-1) and odd(p) then return ((F.dd_p)**id_(F_q))||(-wedgeProduct(1,1,F_p)*((id_(F_p))**F.dd_q));
		);
if not(p==q) and (p==0) then return F.dd_q;
if (p==q) and even(p) then return ((F.dd_p)**id_(F_p))*divComult(1,1,F_p); 
if (p==q) and odd(p) then return ((F.dd_p)**id_(F_p))*extComult(1,1,F_p);
)

--this outputs F_p**F_q if p=/=q, wedge^2 (F_p) if p==q
--and p is odd, and D_2(F_p) if p==q and p is even.
natMod = (p,q,F) -> (if not(p==q) and (p>0) then return F_p**F_q;
if not(p==q) and (p==0) then return F_q;
if (p==q) and even(p) then return symmetricPower(2,F_p); 
if (p==q) and odd(p) then return exteriorPower(2,F_p);
)

--this computes the strand of the divided square
--complex with max degree F_p**F_q 
divStrand = (p,q,F) -> (L=rankList(p,q);
diffs={};
for i in L do (
	if (#i==1) then diffs=diffs|{nat((i_0)_0,(i_0)_1,F)};
	if (#i==2) and not((i_0)_0==0) then ( if not((i_1)_0==(i_1)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F)||map(natMod((i_1)_0,(i_1)_1-1,F),natMod((i_0)_0,(i_0)_1,F),0))|(map(natMod((i_0)_0-1,(i_0)_1,F),natMod((i_1)_0,(i_1)_1,F),0)||nat((i_1)_0,(i_1)_1,F))};
						if((i_1)_0==(i_1)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F))|(map(natMod((i_0)_0-1,(i_0)_1,F),natMod((i_1)_0,(i_1)_1,F),0)||nat((i_1)_0,(i_1)_1,F))};
					);
	if (#i==2) and ((i_0)_0==0) then (if (i_0)_1==2 then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F))|(nat((i_1)_0,(i_1)_1,F))};
					if not((i_0)_1==2) then ( if not((i_1)_0==(i_1)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F)||map(natMod((i_1)_0,(i_1)_1-1,F),natMod((i_0)_0,(i_0)_1,F),0))|(nat((i_1)_0,(i_1)_1,F))};
								if ((i_1)_0==(i_1)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F))|(nat((i_1)_0,(i_1)_1,F))};
					);
				);
	if (#i==3) and not((i_0)_0==0) then ( if not((i_2)_0==(i_2)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F)||map(directSum(natMod((i_1)_0,(i_1)_1-1,F),natMod((i_2)_0,(i_2)_1-1,F)),natMod((i_0)_0,(i_0)_1,F),0))|(map(natMod((i_0)_0-1,(i_0)_1,F),natMod((i_1)_0,(i_1)_1,F),0)||nat((i_1)_0,(i_1)_1,F)||map(natMod((i_2)_0,(i_2)_1-1,F),natMod((i_1)_0,(i_1)_1,F),0))|(map(target nat((i_0)_0,(i_0)_1,F),natMod((i_2)_0,(i_2)_1,F),0)||nat((i_2)_0,(i_2)_1,F))};
						if ((i_2)_0==(i_2)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F)||map(natMod((i_1)_0,(i_1)_1-1,F),natMod((i_0)_0,(i_0)_1,F),0))|(map(natMod((i_0)_0-1,(i_0)_1,F),natMod((i_1)_0,(i_1)_1,F),0)||nat((i_1)_0,(i_1)_1,F))|(map(target nat((i_0)_0,(i_0)_1,F),natMod((i_2)_0,(i_2)_1,F),0)||nat((i_2)_0,(i_2)_1,F))}; 
					);
	if (#i==3) and (i_0)_0==0 then ( if not((i_2)_0==(i_2)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F)||map(directSum(natMod((i_1)_0,(i_1)_1-1,F),natMod((i_2)_0,(i_2)_1-1,F)),natMod((i_0)_0,(i_0)_1,F),0))|(nat((i_1)_0,(i_1)_1,F)||map(natMod((i_2)_0,(i_2)_1-1,F),natMod((i_1)_0,(i_1)_1,F),0))|(map(target nat((i_0)_0,(i_0)_1,F),natMod((i_2)_0,(i_2)_1,F),0)||nat((i_2)_0,(i_2)_1,F))};
					if ((i_2)_0==(i_2)_1) then diffs=diffs|{(nat((i_0)_0,(i_0)_1,F)||map(natMod((i_1)_0,(i_1)_1-1,F),natMod((i_0)_0,(i_0)_1,F),0))|(nat((i_1)_0,(i_1)_1,F))|(map(target nat((i_0)_0,(i_0)_1,F),natMod((i_2)_0,(i_2)_1,F),0)||nat((i_2)_0,(i_2)_1,F))};
					);
);
return chainComplex(reverse diffs);
)